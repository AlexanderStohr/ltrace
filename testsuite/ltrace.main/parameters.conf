void func_intptr(int*)
void func_intptr_ret(+int*)
# int func_strlen(+string[retval])
void func_strfixed(string[4])
void func_ppp(int * **)
void func_stringp(string*)
void func_enum(enum (RED=0,GREEN=1,BLUE=2,CHARTREUSE=3,PETUNIA=4))
void func_short(short,short)
void func_ushort(ushort, ushort)
float func_float(float,float)
double func_double(double,double)
typedef color = enum (RED=0,GREEN=1,BLUE=2,CHARTREUSE=3,PETUNIA=4)
void func_typedef(color)
# void func_arrayi(array(int,arg2)*,void)
# void func_arrayf(array(float,arg2)*,void)
# void func_struct(struct(int,int,int,array(struct(int,int),elt2)*,array(struct(int,int),3),string[elt3])*)

void func_work(+string);
void func_call(+string, string);
void func_str2(string, array(char, zero), inout string, out string, in string);
# out string is like array(out char, zero)

# the third argument is an array of pointers to ints.  These ints,
# called "b", should be rendered in base 16, but only after the
# function returns.  This array is terminated by an element that
# points to zero.
#method fmt1:
#	function (number) {
#		return "???";
#	}
#void func_fmtnum(octal(unsigned int:a), base(char, a), array(base(int post *:b, 16), b=0));
#void func_fmtnum2(render(unsigned int32, fmt1));

#support varargs properly even without "format"
#  int func_format(something, ...)

#+ currently the "format" behaves as if the formatted arguments
#  started from the following argument.  Generalize thus:
#    int func_format(format(A), something, somethingelse:A, ...)
#  that would mean that A is the last argument that is _not_
#  formatted, the same way that the gcc attribute works.
#  simple "format" (without the argument) is equal to the following
#    int func_format(format(A):A, ...)
#  format doesn't need varargs:
#    int func_format(format(A), int:A, int, char, long)
